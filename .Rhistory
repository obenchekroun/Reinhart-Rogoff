# Get log returns
log_returns_xts <- periodReturn(x = x$Adjusted, type = 'log', period = period, ...)
# Rename
names(log_returns_xts) <- "Log.Returns"
# Return in xts format if tibble is not specified
if (return_format == "tibble") {
log_returns <- log_returns_xts %>%
as_tibble() %>%
rownames_to_column(var = "Date") %>%
mutate(Date = ymd(Date))
} else {
log_returns <- log_returns_xts
}
log_returns
}
# "MA" %>%
#     get_stock_prices(return_format = "tibble") %>%
#     get_log_returns(return_format = "tibble")
### Getting data
# sp_500 <- sp_500 %>%
#     mutate(
#         stock.prices = map(ticker.symbol,
#                            function(.x) get_stock_prices(.x,
#                                                          return_format = "tibble",
#                                                          from = "2013-01-01",
#                                                          to = "2017-12-31")
#         ),
#         log.returns  = map(stock.prices,
#                            function(.x) get_log_returns(.x, return_format = "tibble")),
#         mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),
#         sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),
#         n.trade.days = map_dbl(stock.prices, nrow)
#     )
# sp_500 <- sp_500 %>%
#     mutate(
#         stock.prices = map(ticker.symbol,
#                            function(.x) get_stock_prices(.x,
#                                                          return_format = "tibble",
#                                                          from = "2013-01-01",
#                                                          to = "2017-12-31")
#         ),
#         log.returns  = map(stock.prices,
#                            function(.x) get_log_returns(.x, return_format = "tibble")),
#         mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),
#         sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),
#         n.trade.days = map_dbl(stock.prices, nrow),
#         mean.volume = map_dbl(stock.prices, ~ mean(.$Volume)),
#         close.price = map_dbl(stock.prices, ~ last(.$Close))
#     )
# Start the clock!
ptm <- proc.time()
from <- "2013-01-01"
to   <- "2017-12-31"
sp_500 <- sp_500 %>%
mutate(
stock.prices = map(ticker.symbol,
function(.x) tryCatch({
get_stock_prices(.x,
return_format = "tibble",
from = from,
to   = to)
}, error = function(e) {
NA
})
),
len = map_int(stock.prices, length)
) %>%
filter(len > 1) %>%
select(-len) %>%
mutate(
log.returns  = map(stock.prices,
function(.x) get_log_returns(.x, return_format = "tibble")),
mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),
sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),
n.trade.days = map_dbl(stock.prices, nrow),
mean.volume = map_dbl(stock.prices, ~ mean(.$Volume)),
close.price = map_dbl(stock.prices, ~ last(.$Close))
)
# Stop the clock
proc.time() - ptm
#Removing tickers with missing data
sp_500 <- sp_500 %>% na.omit()
# ?mutate
#
# sp_500
#
# sp_500 %>%
#     select(ticker.symbol, mean.volume, close.price)
#
# sp_500 %>%
#     select(ticker.symbol, mean.log.returns, sd.log.returns) %>% filter(mean.log.returns < -0.0029)
#
#  sp_500 %>%
#      slice(which.min(mean.volume))
#
#
# sp_500 %>%
#     select(ticker.symbol, stock.prices:log.returns)
#
#
# sp_500$stock.prices[[1]]
#
# sp_500 %>%
#     select(ticker.symbol, mean.log.returns:n.trade.days)
#
# sp_500 %>%
#     select(ticker.symbol, mean.log.returns:n.trade.days) %>%
#         filter(ticker.symbol == "MA")
#sp_500 <- sp_500 %>% mutate(mean.log.returns = ((exp(mean.log.returns)-1)*100), sd.log.returns = ((exp(sd.log.returns)-1)*100))
### Plotting data
plot_ly(data   = sp_500,
type   = "scatter",
mode   = "markers",
x      = ~ sd.log.returns,
y      = ~ mean.log.returns,
color  = ~ mean.volume,
colors = "Set2" ,
size   = ~ close.price,
text   = ~ str_c("<em>", security, "</em><br>",
"Ticker: ", ticker.symbol, "<br>",
"Sector: ", gics.sector, "<br>",
"No. of Trading Days: ", n.trade.days, "<br>",
"Mean of daily volumes: ", round(mean.volume), "<br>",
"Last close price: ", round(close.price, digits = 2)),
marker = list(opacity = 0.8,
symbol = 'circle',
sizemode = 'diameter',
sizeref = 2,
line = list(width = 1, color = '#000000'))
) %>%
layout(title   = 'S&amp;P500 Analysis: Stock Risk vs Reward',
xaxis   = list(title = 'Risk/Variability (StDev Log Returns)',
gridcolor = 'rgb(0, 0, 0)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis   = list(title = 'Reward/Growth (Mean Log Returns)',
gridcolor = 'rgb(0, 0, 0)',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
margin = list(l = 100,
t = 100,
b = 100),
font   = list(color = '#000000'),
paper_bgcolor = 'rgb(255, 255, 255)',
plot_bgcolor = 'rgb(255, 255, 255)')
# ### Plotting data
# plot_ly(data   = sp_500,
#         type   = "scatter",
#         mode   = "markers",
#         x      = ~ sd.log.returns,
#         y      = ~ mean.log.returns,
#         color  = ~ n.trade.days,
#         colors = "Blues",
#         size   = ~ n.trade.days,
#         text   = ~ str_c("<em>", security, "</em><br>",
#                          "Ticker: ", ticker.symbol, "<br>",
#                          "Sector: ", gics.sector, "<br>",
#                          "Sub Sector: ", gics.sub.industry, "<br>",
#                          "No. of Trading Days: ", n.trade.days),
#         marker = list(opacity = 0.8,
#                       symbol = 'circle',
#                       sizemode = 'diameter',
#                       sizeref = 4.0,
#                       line = list(width = 2, color = '#FFFFFF'))
# ) %>%
#     layout(title   = 'S&amp;P500 Analysis: Stock Risk vs Reward',
#            xaxis   = list(title = 'Risk/Variability (StDev Log Returns)',
#                           gridcolor = 'rgb(0, 0, 0)',
#                           zerolinewidth = 1,
#                           ticklen = 5,
#                           gridwidth = 2),
#            yaxis   = list(title = 'Reward/Growth (Mean Log Returns)',
#                           gridcolor = 'rgb(0, 0, 0)',
#                           zerolinewidth = 1,
#                           ticklen = 5,
#                           gridwith = 2),
#            margin = list(l = 100,
#                          t = 100,
#                          b = 100),
#            font   = list(color = '#000000'),
#            paper_bgcolor = 'rgb(255, 255, 255)',
#            plot_bgcolor = 'rgb(255, 255, 255)')
sp_500 %>%
filter(mean.log.returns >= 0.001,
sd.log.returns < 0.0315) %>%
select(ticker.symbol, mean.log.returns:n.trade.days) %>%
arrange(mean.log.returns %>% desc())
#sp_500 %>% filter(ticker.symbol == "NFLX") %>% select(ticker.symbol, mean.log.returns, sd.log.returns)
"ABT" %>%
getSymbols(auto.assign = FALSE,
from = "2013-01-01",
to   = "2017-12-31") %>%
chartSeries(name = "ABT")
#### Plotting correlation
limit <- 30
sp_500_hp <- sp_500 %>%
filter(n.trade.days > 1000) %>%
filter(sd.log.returns < 0.0315) %>%
mutate(rank = mean.log.returns %>% desc() %>% min_rank()) %>%
filter(rank <= limit) %>%
arrange(rank) %>%
select(security, rank, mean.log.returns, sd.log.returns, log.returns)
sp_500_hp
sp_500_hp_unnest <- sp_500_hp %>%
select(security, log.returns) %>%
unnest()
sp_500_hp_unnest
sp_500_hp_spread <- sp_500_hp_unnest %>%
spread(key = security, value = Log.Returns) %>%
na.omit()
sp_500_hp_spread
sp_500_hp_cor <- sp_500_hp_spread %>%
select(-Date) %>%
cor()
sp_500_hp_cor[1:6, 1:6] # show first 6 columns and rows
#col3 <- colorRampPalette(c("red", "white", "blue"))
# res1 <- cor.mtest(sp_500_hp_cor, conf.level = .90)
# res2 <- cor.mtest(sp_500_hp_cor, conf.level = .99)
# col1 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "white",
#                            "cyan", "#007FFF", "blue", "#00007F"))
col2 <- colorRampPalette(c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))
# col3 <- colorRampPalette(c("red", "white", "blue"))
# col4 <- colorRampPalette(c("#7F0000", "red", "#FF7F00", "yellow", "#7FFF7F",
#                            "cyan", "#007FFF", "blue", "#00007F"))
sp_500_hp_cor %>%
corrplot(order   = "hclust",
addrect = 10, mar=c(0,0,2,0), method = "shade", type = "upper", col = col2(20), tl.col = "black", tl.cex = .7, addgrid.col = "gray", title = "Correlation Matrix between top30 daily return S&P 500 stocks")
sp_500_hp_cor %>%
corrplot(order   = "hclust",
addrect = 10, mar=c(0,0,0,0), method = "shade", type = "upper", col = col2(20), tl.col = "black", tl.cex = .7, addgrid.col = "gray", title = "Correlation Matrix between top30 daily return S&P 500 stocks")
sp_500_hp_cor %>%
corrplot(order   = "hclust",
addrect = 10, method = "shade", type = "upper", col = col2(20), tl.col = "black", tl.cex = .7, addgrid.col = "gray", title = "Correlation Matrix between top30 daily return S&P 500 stocks")
sp_500_hp_cor %>%
corrplot(order   = "hclust",
addrect = 10, mar=c(0,0,5,0), method = "shade", type = "upper", col = col2(20), tl.col = "black", tl.cex = .7, addgrid.col = "gray", title = "Correlation Matrix between top30 daily return S&P 500 stocks")
sp_500_hp_cor %>%
corrplot(order   = "hclust",
addrect = 10, mar=c(0,0,2,0), method = "shade", type = "upper", col = col2(20), tl.col = "black", tl.cex = .1, addgrid.col = "gray", title = "Correlation Matrix between top30 daily return S&P 500 stocks")
sp_500_hp_cor %>%
corrplot(order   = "hclust",
addrect = 10, mar=c(0,0,2,0), method = "shade", type = "upper", col = col2(20), tl.col = "black", tl.cex = .4, addgrid.col = "gray", title = "Correlation Matrix between top30 daily return S&P 500 stocks")
sp_500_hp_cor %>%
corrplot(order   = "hclust",
addrect = 10, mar=c(0,0,2,0), method = "shade", type = "upper", col = col2(20), tl.col = "black", tl.cex = .6, addgrid.col = "gray", title = "Correlation Matrix between top30 daily return S&P 500 stocks")
q()
#http://www.business-science.io/investments/2016/10/23/SP500_Analysis.html
# Prerequisites ----------------------------------------------------------------
library(quantmod)   # get stock prices; useful stock analysis functions
library(xts)        # working with extensible time series
library(rvest)      # web scraping
library(tidyverse)  # ggplot2, purrr, dplyr, tidyr, readr, tibble
library(stringr)    # working with strings
library(forcats)    # working with factors
library(lubridate)  # working with dates in tibbles / data frames
library(plotly)     # Interactive plots
library(corrplot)   # Visuazlize correlation plots
getSymbols("MA", from = "2013-01-01", to = "2017-12-31")
MA %>% class()
MA %>% str()
MA %>% head()
MA %>%
Ad() %>%
chartSeries()
MA %>%
chartSeries(TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
subset='2016',
theme="white"
)
MA %>%
Ad() %>%
dailyReturn(type = 'log') %>%
head()
MA_log_returns <- MA %>%
Ad() %>%
dailyReturn(type = "log")
names(MA_log_returns) <- "MA.Log.Returns"
# Plot the log-returns
MA_log_returns %>%
ggplot(aes(x = MA.Log.Returns)) +
geom_histogram(bins = 100) +
geom_density() +
geom_rug(alpha = 0.5)
probs <- c(.005, .025, .25, .5, .75, .975, .995)
dist_log_returns <- MA_log_returns %>%
quantile(probs = probs, na.rm = TRUE)
dist_log_returns
mean_log_returns <- mean(MA_log_returns, na.rm = TRUE)
sd_log_returns <- sd(MA_log_returns, na.rm = TRUE)
mean_log_returns %>% exp()
mean_log_returns
(exp(mean_log_returns)-1)*100
# Parameters
N     <- 1000
mu    <- mean_log_returns
sigma <- sd_log_returns
day <- 1:N
price_init <- MA$MA.Adjusted[[nrow(MA$MA.Adjusted)]]
# Simulate prices
set.seed(386)
price  <- c(price_init, rep(NA, N-1))
for(i in 2:N) {
price[i] <- price[i-1] * exp(rnorm(1, mu, sigma))
}
price_sim <- cbind(day, price) %>%
as_tibble()
# Visualize price simulation
price_sim %>%
ggplot(aes(day, price)) +
geom_line() +
ggtitle(str_c("MA: Simulated Prices for ", N," Trading Days"))
# Parameters
N     <- 252 # Number of Stock Price Simulations
M     <- 250  # Number of Monte Carlo Simulations
mu    <- mean_log_returns
sigma <- sd_log_returns
day <- 1:N
price_init <- MA$MA.Adjusted[[nrow(MA$MA.Adjusted)]]
# Simulate prices
set.seed(123)
monte_carlo_mat <- matrix(nrow = N, ncol = M)
for (j in 1:M) {
monte_carlo_mat[[1, j]] <- price_init
for(i in 2:N) {
monte_carlo_mat[[i, j]] <- monte_carlo_mat[[i - 1, j]] * exp(rnorm(1, mu, sigma))
}
}
# Format and organize data frame
price_sim <- cbind(day, monte_carlo_mat) %>%
as_tibble()
nm <- str_c("Sim.", seq(1, M))
nm <- c("Day", nm)
names(price_sim) <- nm
price_sim <- price_sim %>%
gather(key = "Simulation", value = "Stock.Price", -(Day))
# Visualize simulation
price_sim %>%
ggplot(aes(x = Day, y = Stock.Price, Group = Simulation)) +
geom_line(alpha = 0.1) +
ggtitle(str_c("MA: ", M,
" Monte Carlo Simulations for Prices Over ", N,
" Trading Days"))
end_stock_prices <- price_sim %>%
filter(Day == max(Day))
probs <- c(.005, .025, .25, .5, .75, .975, .995)
dist_end_stock_prices <- quantile(end_stock_prices$Stock.Price, probs = probs)
dist_end_stock_prices %>% round(2)
# Inputs
N_hist          <- nrow(MA) / 252
p_start_hist    <- MA$MA.Adjusted[[1]]
p_end_hist      <- MA$MA.Adjusted[[nrow(MA)]]
N_sim           <- N / 252
p_start_sim     <- p_end_hist
p_end_sim       <- dist_end_stock_prices[[4]]
# CAGR calculations
CAGR_historical <- (p_end_hist / p_start_hist) ^ (1 / N_hist) - 1
CAGR_sim        <- (p_end_sim / p_start_sim) ^ (1 / N_sim) - 1
library(jrvFinance)
library(jrvFinance) # This package has a the irr formula to solve our problem
library(jrvFinance) # This package has a the irr formula to solve our problem
library(tidyquant) # general R quant package
library(DT) # package to display pretty Data tables
project1_cf <- tibble(Year = 0:5,
cf = c(-800,200,250,300,350,400))
project2_cf <- tibble(Year = 0:5,
cf = c(-500,150,170,178,250,300))
project1_cf %>%
DT::datatable(rownames = FALSE,caption = "Project 1")
library(DT) # package to display pretty Data tables
install.packages("DT")
library(tidyquant) # general R quant package
library(DT) # package to display pretty Data tables
project1_cf <- tibble(Year = 0:5,
cf = c(-984398-,204474,207541,210654,213814,217021,220277,223581,226934,230338,233793,237300,240860,244473,248140,251862,255640,259474,263367,267317,271327,275397,279528,283721,287976,292296 ))
project1_cf <- tibble(Year = 0:5,
cf = c(-984398,204474,207541,210654,213814,217021,220277,223581,226934,230338,233793,237300,240860,244473,248140,251862,255640,259474,263367,267317,271327,275397,279528,283721,287976,292296 ))
project1_cf <- tibble(Year = 0:25,
cf = c(-984398,204474,207541,210654,213814,217021,220277,223581,226934,230338,233793,237300,240860,244473,248140,251862,255640,259474,263367,267317,271327,275397,279528,283721,287976,292296 ))
projectOptimiste_cf <- tibble(Year = 0:25,
cf = c(-984398,204474,207541,210654,213814,217021,220277,223581,226934,230338,233793,237300,240860,244473,248140,251862,255640,259474,263367,267317,271327,275397,279528,283721,287976,292296 ))
projectNormal_cf <- tibble(Year = 0:25,
cf = c(-984398,182566,185305,188084,190905,193769,196675,199626,202620,205659,208744,211875,215053,218279,221553,224877,228250,231674,235149,238676,242256,245890,249578,253322,257122,260979))
projectPessimiste_cf <- tibble(Year = 0:25,
cf = c(-984398,164309,166774,169276,171815,174392,177008,179663,182358,185093,187870,190688,193548,196451,199398,202389,205425,208506,211634,214808,218031,221301,224620,227990,231410,234881))
projectOptimiste_cf %>%
DT::datatable(rownames = FALSE,caption = "Projet Optimiste")
projectNormal_cf %>%
DT::datatable(rownames = FALSE,caption = "Projet Normal")
projectPessimiste_cf %>%
DT::datatable(rownames = FALSE,caption = "Projet Pessimiste")
irr1 <- projectOptimiste_cf %>%
select(cf) %>%
.[[1]] %>%
irr()
irr2 <- projectNormal_cf %>%
select(cf) %>%
.[[1]] %>%
irr()
irr3 <- projectPessimiste_cf %>%
select(cf) %>%
.[[1]] %>%
irr()
irr_tbl <- tibble(Name = c("Projet Optimiste", "Projet Normal","Projet Pessimiste" ),
IRR = c(irr1,irr2,irr3))
irr_tbl %>%
datatable(caption = "IRR des 3 scénarios")
View(irr_tbl)
View(irr_tbl)
print(irr_tbl)
install.packages(c("backports", "BH", "brio", "broom", "cli", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "DBI", "DEoptimR", "desc", "devtools", "diffobj", "digest", "DT", "dtplyr", "fansi", "forecast", "fs", "future", "gender", "generics", "gert", "glmnet", "glue", "h2o", "hms", "htmlwidgets", "igraph", "ipred", "jrvFinance", "jsonlite", "knitr", "lifecycle", "lmtest", "lubridate", "maps", "matrixStats", "memoise", "mime", "mvtnorm", "officer", "openssl", "openxlsx", "padr", "parallelly", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "progressr", "rcmdcheck", "Rcpp", "RcppArmadillo", "RCurl", "readr", "recipes", "remotes", "rJava", "rlang", "rmarkdown", "robustbase", "rsample", "rvest", "sessioninfo", "slam", "sn", "stringdist", "stringi", "testthat", "tibble", "tidyr", "timetk", "tinytex", "tseries", "TTR", "tzdb", "usethis", "uuid", "viridis", "vroom", "waldo", "withr", "xfun", "XLConnect", "XML", "xml2"))
install.packages(c("class", "foreign", "MASS", "Matrix", "nlme", "nnet", "spatial"), lib="/usr/local/Cellar/r/4.1.2/lib/R/library")
install.packages("rJava")
R CMD javareconf
install.packages("rJava")
install.packages("rJava")
RR_data <- read_excel("RR.xlsx",sheet = "Mean")
library(readxl) # Manipulation des excels
RR_data <- read_excel("RR.xlsx",sheet = "Mean")
if(Sys.getenv("RSTUDIO") == "1"){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Definition du répertoire de travail
}
RR_data <- read_excel("RR.xlsx",sheet = "Mean")
###################################################################################
### Analyse de la corrélation entre dette et croissance - Reinhardt and Rogoff  ###
###################################################################################
rm(list=ls())
cat("\014")
Sys.setlocale("LC_ALL", 'en_GB.UTF-8')
#library(tidyquant)  # Loads tidyverse and several other pkgs
#library(tidyverse)
#library(plyr) #Manipulation de la data
#library(dplyr)
#library(purrr)
#library(stringr)
library(readxl) # Manipulation des excels
#library(writexl)
#library(openxlsx)
#library(ggalt) # pour la partie graphique
#library(ggridges)
#library(scales)
#library(pivottabler) # Pour les pivottables
#library(reshape2)
if(Sys.getenv("RSTUDIO") == "1"){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Definition du répertoire de travail
}
RR_data <- read_excel("RR.xlsx",sheet = "Mean")
View(RR_data)
RR_data <- read_excel("RR.xlsx",sheet = "Mean") %>%
select(-"Debt category")
library(tidyquant)  # Loads tidyverse and several other pkgs
RR_data <- read_excel("RR.xlsx",sheet = "Mean") %>%
select(-"Debt category")
library(tidyverse)
RR_data <- read_excel("RR.xlsx",sheet = "Mean") %>%
select(-"Debt category")
RR_data <- read_excel("RR.xlsx",sheet = "Mean") %>%
select(-"Debt category")
names(RR_data) <- c("Country", "Year", "Debt.to.GDP","Growth.rate")
p <- RR_data %>%
ggplot(aes(x = Debt, y = Growth)) +
geom_point(aes(color = Factor_Year)) +
labs(title = "Growth en fonction de la Debt", y = "Growth (en %)", x = "Debt (en %)") +
theme_minimal() +
theme(axis.text=element_text(size=7), axis.title=element_text(size=11,face="bold"))
p %>% print()
p <- RR_data %>%
ggplot(aes(x = Debt, y = Growth)) +
#geom_point(aes(color = Factor_Year)) +
labs(title = "Growth en fonction de la Debt", y = "Growth (en %)", x = "Debt (en %)") +
theme_minimal() +
theme(axis.text=element_text(size=7), axis.title=element_text(size=11,face="bold"))
p %>% print()
RR_data <- read_excel("RR.xlsx",sheet = "Mean") %>%
select(-"Debt category")
names(RR_data) <- c("Country", "Year", "Debt","Growth")
p <- RR_data %>%
ggplot(aes(x = Debt, y = Growth)) +
#geom_point(aes(color = Factor_Year)) +
labs(title = "Growth en fonction de la Debt", y = "Growth (en %)", x = "Debt (en %)") +
theme_minimal() +
theme(axis.text=element_text(size=7), axis.title=element_text(size=11,face="bold"))
p %>% print()
p <- RR_data %>%
ggplot(aes(x = Debt, y = Growth)) +
geom_point(aes(color = Growth)) +
labs(title = "Growth en fonction de la Debt", y = "Growth (en %)", x = "Debt (en %)") +
theme_minimal() +
theme(axis.text=element_text(size=7), axis.title=element_text(size=11,face="bold"))
p %>% print()
p <- RR_data %>%
ggplot(aes(x = Debt, y = Growth)) +
geom_point() +
labs(title = "Growth en fonction de la Debt", y = "Growth (en %)", x = "Debt (en %)") +
theme_minimal() +
theme(axis.text=element_text(size=7), axis.title=element_text(size=11,face="bold"))
p %>% print()
p <- RR_data %>%
ggplot(aes(x = Debt, y = Growth)) +
geom_point() +
labs(title = "Growth en fonction de la Debt", y = "Growth (en %)", x = "Debt (en %)") +
xlim(0,120) +
ylim(-5,10) +
theme_minimal() +
theme(axis.text=element_text(size=7), axis.title=element_text(size=11,face="bold"))
p %>% print()
